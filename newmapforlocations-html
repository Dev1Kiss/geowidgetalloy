<!DOCTYPE html>
<html>
  <head>
    <title>Locator</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <style>
/* Paste this into advanced elementor settings on every page */
/* .elementor-widget {
    position: unset;
} */
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

      #map-container {
        width: 100%;
        min-height: 200px;
        height: fit-content;
        /* position: relative; */
        font-family: "Roboto", sans-serif;
        box-sizing: border-box;
        overflow-y: hidden;
        background-color:#FFF !important;
      }

      #map-container button {
        background: none;
        color: inherit;
        border: none;
        padding: 0;
        font: inherit;
        font-size: inherit;
        cursor: pointer;
      }

      #map {
        position: absolute;
        left: 22em;
        top: 0;
        right: 0;
        bottom: 0;
        height: 0px;
        width:0px;
      }
      .linkTitle {
        text-decoration: none;
        color: #000;
      }
      .location-tile-heading__icon {
        /* display: block; */
        height: 12px;
        transform: rotate(
        90deg
        );
        width: 12px;
      }

      #locations-panel {
        all: unset;
        position: absolute;
        left: 0;
        width: 100%;
        top: 0;
        bottom: 0;
        overflow-y: hidden;
        /* background: white; */
        padding: 0.5em;
        box-sizing: border-box;
        font-family: Arial, Helvetica, sans-serif !important;
      }
      #location-search-input{
        padding-left: 4px;
        background: transparent !important;
        border-left: none;
        border-right: none;
        border-top: none;
        border-color: #DBDC09;
      }

      .bookingSlots{
        display:flex;
        justify-content: space-between;
      }
      @media only screen and (max-width: 876px) {
        #map {
          left: 0;
          bottom: 50%;
        }

        #locations-panel {
          /* top: 50%; */
          right: 0;
          width: unset;
          overflow-y: hidden;
        }
      }

      #locations-panel-list > header {
        /* padding: 1.4em 1.4em 0 1.4em; */
        /* background-color: rgba(255,255,255,.85) */
        margin-bottom: 10px;
      }

      #locations-panel-list h1.search-title {
        font-size: 1em;
        font-weight: 500;
        margin: 0;
      }

      #locations-panel-list h1.search-title > img {
        vertical-align: bottom;
        margin-top: -1em;
      }

      #locations-panel-list .search-input {
        width: 100%;
        margin-top: 0.8em;
        position: relative;
      }

      #locations-panel-list .search-input input {
        width: 100%;
        /* border: 1px solid rgba(0, 0, 0, 0.2); */
        border-radius: 0.3em;
        height: 2.2em;
        box-sizing: border-box;
        padding: 0 2.5em 0 1.5em;
        font-size: 1.1em;
        font-weight: bold;
      }

      #locations-panel-list .search-input-overlay {
        position: absolute;
      }

      #locations-panel-list .search-input-overlay.search {
        right: 2px;
        top: 2px;
        bottom: 2px;
        width: 2.4em;
      }

      #locations-panel-list .search-input-overlay.marker {
        left: 2px;
        top: 4px;
        bottom: 2px;
        width: 2.4em;
      }

      #locations-panel-list .search-input-overlay.search button {
        width: 100%;
        height: 100%;
        border-radius: 0.2em;
        color: black;
        background: transparent;
      }

      #locations-panel-list .search-input-overlay.search .icon {
        margin-top: 0.05em;
        vertical-align: top;
      }

      #locations-panel-list .section-name {
        font-weight: 500;
        font-size: 0.9em;
        /* margin: 1.8em 0 1em 1.5em; */
      }

      #locations-panel-list .location-result {
        position: relative;
        padding: 0.8em 1.0em 0.8em 1.4em;
        background: white;
        border-bottom: 1px solid rgba(0, 0, 0, 0.12);
        /* cursor: pointer; */
      }

      #locations-panel-list .location-result:first-of-type {
        border-top: 1px solid rgba(0, 0, 0, 0.12);
      }

      #locations-panel-list .location-result:last-of-type {
        /* padding-bottom: 50px; */
        border-bottom: none;
      }

      #locations-panel-list .location-result.selected {
        outline: 2px solid #4285f4;
      }

      #locations-panel-list button.select-location {
        margin-bottom: 0.6em;
      }

      #locations-panel-list .location-result h2.name {
        font-size: 1.2em;
        font-weight: 700;
        margin: 0;
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
      }

      #locations-panel-list .location-result .address {
        font-size: 0.9em;
        margin-bottom: 0.5em;
      }

      #locations-panel-list .location-result .distance {
        position: absolute;
        top: 4.9em;
        right: 1.5em;
        font-weight: bolder;
        text-align: center;
        font-size: 0.9em;
        width: 5em;
      }

      #locations-panel-list .show-directions {
        position: absolute;
        right: 1.2em;
        top: 2.3em;
      }

      #location-results-list {
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      .displayAllDiv{
        width:100%;
        text-align: center;
        background:white;
        padding-bottom: 5px;
      }
      .displayAllLink{
        /* text-decoration: none; */
        /* all: unset; */
        padding-bottom: 4px;
        text-decoration: underline !important;
        text-decoration-line: underline !important;
        text-decoration-style: solid !important;
        text-decoration-color: #DBDC09 !important;
        text-decoration-thickness: 3px !important;
        text-underline-offset: 3px !important;
        color: black !important;
      }
      .displayAllLink:before {
        border-radius: 1px;
        bottom: 0;
        content: "";
        height: 2px;
        left: 0;
        position: absolute;
        width: 100%;
        background-color: #DBDC09;
      }
      .cta-button{
          -webkit-text-size-adjust: 100%;
        --scroll-y: 104;
        list-style: none;
        box-sizing: border-box;
        color: #000;
        font-family: "United Sans Semi Condensed", Sans-serif;
        font-size: 19px;
        font-style: normal;
        font-weight: 700;
        background-color: #DBDC09;
        border-radius: 26px;
        display: inline-block;
        float: right;
        line-height: 24px;
        padding: 12px 30px;
        border: 0;
        cursor: pointer;
        position: relative;
        text-decoration: none;
        transition: all .2s;
        padding-left: 25px;
        padding-right: 25px;
        white-space: nowrap;
        margin-bottom: 5px;
        max-height: 48px;
        margin-top: auto;
        margin-bottom: auto;
      }
      
      .address{
      color:#000 !important;}
      
      
    </style>
    <script>
      'use strict';
      let searchMade = false;
      let appointmentsLoaded = false;
      const maxMilesCluster = 5 * 1609.34; // change first part of equation to set miles.
      var manyCloseResults = false;
      let closeResultsCounter = 0;
      const maxDisplayableCloseResults = 2;
      /**
       * Defines an instance of the Locator+ solution, to be instantiated
       * when the Maps library is loaded.
       */
      function LocatorPlus(configuration) {
        const locator = this;

        locator.locations = configuration.locations || [];
        locator.capabilities = configuration.capabilities || {};

        const mapEl = document.getElementById('map');
        locator.panelListEl = document.getElementById('locations-panel-list');
        const sectionNameEl =
            document.getElementById('location-results-section-name');
        const resultsContainerEl = document.getElementById('location-results-list');

        const itemsTemplate = Handlebars.compile(
            document.getElementById('locator-result-items-tmpl').innerHTML);

        locator.searchLocation = null;
        locator.searchLocationMarker = null;
        locator.selectedLocationIdx = null;
        locator.userCountry = null;

        // Initialize the map -------------------------------------------------------
        const mapOptions = configuration.mapOptions;
        console.log("map el", mapEl);
        locator.map = new google.maps.Map(mapEl, {
          fullscreenControl: mapOptions.fullscreenControl,
          zoomControl: mapOptions.zoomControl,
          streetViewControl: mapOptions.streetViewControl,
          mapTypeControl: mapOptions.mapTypeControl,
          mapTypeControlOptions: {
            position: google.maps.ControlPosition.TOP_RIGHT,
          },
        });

        // Store selection.
        const selectResultItem = function(locationIdx, panToMarker) {
          locator.selectedLocationIdx = locationIdx;
          for (let locationElem of resultsContainerEl.children) {
            locationElem.classList.remove('selected');
            if (getResultIndex(locationElem) === locator.selectedLocationIdx) {
              locationElem.classList.add('selected');
            }
          }
          if (panToMarker && (locationIdx != null)) {
            locator.map.panTo(locator.locations[locationIdx].coords);
          }
        };

        // Create a marker for each location.
        const markers = locator.locations.map(function(location, index) {
          const marker = new google.maps.Marker({
            position: location.coords,
            map: locator.map,
            title: location.title,
          });
          marker.addListener('click', function() {
            selectResultItem(index, false);
          });
          return marker;
        });

        // Fit map to marker bounds.
        locator.updateBounds = function() {
          const bounds = new google.maps.LatLngBounds();
          if (locator.searchLocationMarker) {
            bounds.extend(locator.searchLocationMarker.getPosition());
          }
          for (let i = 0; i < markers.length; i++) {
            bounds.extend(markers[i].getPosition());
          }
          locator.map.fitBounds(bounds);
        };
        locator.updateBounds();

        // Get the distance of a store location to the user's location,
        // used in sorting the list.
        const getLocationDistance = function(location) {
          if (!locator.searchLocation) return null;

          // Use travel distance if available (from Distance Matrix).
          if (location.travelDistanceValue != null) {
            return location.travelDistanceValue;
          }

          // Fall back to straight-line distance.
          return google.maps.geometry.spherical.computeDistanceBetween(
              new google.maps.LatLng(location.coords),
              locator.searchLocation.location);
        };

        // Render the results list --------------------------------------------------
        const getResultIndex = function(elem) {
          return parseInt(elem.getAttribute('data-location-index'));
        };

        locator.renderResultsList = function() {
          let locations = locator.locations.slice();
          for (let i = 0; i < locations.length; i++) {
            locations[i].index = i;
          }
          if (locator.searchLocation) {
            // sectionNameEl.textContent =
            //     'Nearest locations (' + locations.length + ')';
            locations.sort(function(a, b) {
              return getLocationDistance(a) - getLocationDistance(b);
            });
            closeResultsCounter = 0;
            for(const l of locations){
              console.log("Raw travel distance: ", l.travelDistanceValue)
              if (l.travelDistanceValue <= maxMilesCluster) {
                console.log(l.travelDistanceValue)
                closeResultsCounter += 1;
              }
            }
            if(closeResultsCounter > maxDisplayableCloseResults){
              console.log("Many close results!", closeResultsCounter)
              manyCloseResults = true;
              locations = locations.slice(0, maxDisplayableCloseResults);
              console.log("Sliced locations: ", locations)
              Handlebars.compile(
              document.getElementById('locator-result-items-tmpl').innerHTML);
              document.getElementById("map-container").style = `height: ${ (265 * maxDisplayableCloseResults)}px`
            } else {
              console.log("only showing one result")
              manyCloseResults = false;
              locations = [locations[0]]
              document.getElementById("map-container").style = `height: ${ 250}px`
            }
            
            // document.getElementById("map-container").style = `height: 36vh`
          } else {
            // sectionNameEl.textContent = `All locations (${locations.length})`;
            console.log("No location, clearing")
            if(!searchMade){
              locations = [];
            }
          }
          const resultItemContext = {
            appointmentsLoaded,
            manyCloseResults,
            closeResultsCounter,
            locations: locations,
            showDirectionsButton: !!locator.searchLocation
          };
          resultsContainerEl.innerHTML = itemsTemplate(resultItemContext);
          for (let item of resultsContainerEl.children) {
            const resultIndex = getResultIndex(item);
            if (resultIndex === locator.selectedLocationIdx) {
              item.classList.add('selected');
            }

            const resultSelectionHandler = function() {
              if (resultIndex !== locator.selectedLocationIdx) {
                locator.clearDirections();
              }
              selectResultItem(resultIndex, true);
            };

            // Clicking anywhere on the item selects this location.
            // Additionally, create a button element to make this behavior
            // accessible under tab navigation.
            item.addEventListener('click', resultSelectionHandler);
            item.querySelector('.select-location')
                // .addEventListener('click', function(e) {
                //   resultSelectionHandler();
                //   e.stopPropagation();
                // });

            if (resultItemContext.showDirectionsButton) {
              item.querySelector('.show-directions')
                  // .addEventListener('click', function(e) {
                  //   selectResultItem(resultIndex, false);
                  //   locator.updateDirections();
                  //   e.stopPropagation();
                  // });
            }
          }
        };

        // Optional capability initialization --------------------------------------
        initializeSearchInput(locator);
        initializeDistanceMatrix(locator);
        initializeDirections(locator);

        // Initial render of results -----------------------------------------------
        locator.renderResultsList();    
      }

      /** When the search input capability is enabled, initialize it. */
      function initializeSearchInput(locator) {
        const geocodeCache = new Map();
        const geocoder = new google.maps.Geocoder();

        const searchInputEl = document.getElementById('location-search-input');
        const searchButtonEl = document.getElementById('location-search-button');

        const updateSearchLocation = function(address, location) {
          if (locator.searchLocationMarker) {
            locator.searchLocationMarker.setMap(null);
          }
          if (!location) {
            locator.searchLocation = null;
            return;
          }
          locator.searchLocation = {'address': address, 'location': location};
          locator.searchLocationMarker = new google.maps.Marker({
            position: location,
            map: locator.map,
            title: 'My location',
            icon: {
              path: google.maps.SymbolPath.CIRCLE,
              scale: 12,
              fillColor: '#3367D6',
              fillOpacity: 0.5,
              strokeOpacity: 0,
            }
          });

          // Update the locator's idea of the user's country, used for units. Use
          // `formatted_address` instead of the more structured `address_components`
          // to avoid an additional billed call.
          const addressParts = address.split(' ');
          locator.userCountry = addressParts[addressParts.length - 1];

          // Update map bounds to include the new location marker.
          locator.updateBounds();

          // Update the result list so we can sort it by proximity.
          locator.renderResultsList();

          locator.updateTravelTimes();

          locator.clearDirections();
        };

        const geocodeSearch = function(query) {
          if (!query) {
            return;
          }
          console.log("GEOCODE QUERY", query)
          const handleResult = function(geocodeResult) {
            searchInputEl.value = geocodeResult.formatted_address;
            updateSearchLocation(
                geocodeResult.formatted_address, geocodeResult.geometry.location);
          };

          if (geocodeCache.has(query)) {
            handleResult(geocodeCache.get(query));
            return;
          }
          const request = {address: query, bounds: locator.map.getBounds()};
          geocoder.geocode(request, function(results, status) {
            if (status === 'OK') {
              console.warn("Search geocoded.")
              if (results.length > 0) {
                const result = results[0];
                geocodeCache.set(query, result);
                handleResult(result);
              }
            }
          });
        };

        // Set up geocoding on the search input.
        searchButtonEl.addEventListener('click', function() {
          geocodeSearch(searchInputEl.value.trim());
        });

        // Initialize Autocomplete.
        initializeSearchInputAutocomplete(
            locator, searchInputEl, geocodeSearch, updateSearchLocation);

            if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              const pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
              };
              console.log(pos)
              geocodeSearch(`${pos.lat}, ${pos.lng}`);
              // infoWindow.setPosition(pos);
              // infoWindow.setContent("Location found.");
              // infoWindow.open(map);
              // map.setCenter(pos);
            },
            () => {
    //           handleLocationError(true, infoWindow, map.getCenter()!);
            }
          );
        } else {
          // Browser doesn't support Geolocation
        }
      }

      /** Add Autocomplete to the search input. */
      function initializeSearchInputAutocomplete(
          locator, searchInputEl, fallbackSearch, searchLocationUpdater) {
        // Set up Autocomplete on the search input. Bias results to map viewport.
        const autocomplete = new google.maps.places.Autocomplete(searchInputEl, {
          types: ['geocode'],
          fields: ['place_id', 'formatted_address', 'geometry.location']
        });
        autocomplete.bindTo('bounds', locator.map);
        autocomplete.addListener('place_changed', function() {
          const placeResult = autocomplete.getPlace();
          if (!placeResult.geometry) {
            // Hitting 'Enter' without selecting a suggestion will result in a
            // placeResult with only the text input value as the 'name' field.
            fallbackSearch(placeResult.name);
            return;
          }
          searchLocationUpdater(
              placeResult.formatted_address, placeResult.geometry.location);
        });
      }

      /** Initialize Distance Matrix for the locator. */
      function initializeDistanceMatrix(locator) {
        const distanceMatrixService = new google.maps.DistanceMatrixService();

        // Annotate travel times to the selected location using Distance Matrix.
        locator.updateTravelTimes = function() {
          if (!locator.searchLocation) return;
          searchMade = true;
          const units = (locator.userCountry === 'USA') ?
              google.maps.UnitSystem.IMPERIAL :
              google.maps.UnitSystem.METRIC;
          console.log("SEARCH LOCATION:", locator.searchLocation.location.lat(), locator.searchLocation.location.lng())
          const request = {
            origins: [locator.searchLocation.location],
            destinations: locator.locations.map(function(x) {
              return x.coords;
            }),
            travelMode: google.maps.TravelMode.DRIVING,
            unitSystem: units,
          };
          const callback = function(response, status) {
            if (status === 'OK') {
              console.log("Maps search created")
              searchMade = true;
              const distances = response.rows[0].elements;
              for (let i = 0; i < distances.length; i++) {
                const distResult = distances[i];
                let travelDistanceText, travelDistanceValue;
                if (distResult.status === 'OK') {
                  travelDistanceText = distResult.distance.text;
                  travelDistanceValue = distResult.distance.value;
                }
                const location = locator.locations[i];
                location.travelDistanceText = travelDistanceText;
                location.travelDistanceValue = travelDistanceValue;
                console.log("FINAL TRAVEL DISTANCE", travelDistanceText)
              }

              // Re-render the results list, in case the ordering has changed.
              locator.renderResultsList();
            }
          };
          distanceMatrixService.getDistanceMatrix(request, callback);
        };
      }

      /** Initialize Directions service for the locator. */
      function initializeDirections(locator) {
        const directionsCache = new Map();
        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer({
          suppressMarkers: true,
        });

        // Update directions displayed from the search location to
        // the selected location on the map.
        locator.updateDirections = function() {
          if (!locator.searchLocation || (locator.selectedLocationIdx == null)) {
            return;
          }
          const cacheKey = JSON.stringify(
              [locator.searchLocation.location, locator.selectedLocationIdx]);
          if (directionsCache.has(cacheKey)) {
            const directions = directionsCache.get(cacheKey);
            directionsRenderer.setMap(locator.map);
            directionsRenderer.setDirections(directions);
            return;
          }
          const request = {
            origin: locator.searchLocation.location,
            destination: locator.locations[locator.selectedLocationIdx].coords,
            travelMode: google.maps.TravelMode.DRIVING
          };
          directionsService.route(request, function(response, status) {
            if (status === 'OK') {
              directionsRenderer.setMap(locator.map);
              directionsRenderer.setDirections(response);
              directionsCache.set(cacheKey, response);
            }
          });
        };

        locator.clearDirections = function() {
          directionsRenderer.setMap(null);
        };
      }
    </script>
    <script>
      const locationMappings = {
 
        "ChIJgeNlZ0t19YgRHseqt4C59iY": {
          key: "bcc2b96f-24f0-4062-bdbd-51ebad31ee91",
          calendarId: "EPFo9hi9M6IYuhYn1Pmu", // Roswell,
          bookingURL: "#howmodal"
        },
  
      }
      const currentDate = new Date();
      const numberOfDaysAheadForAppointmentSlots = 4;
      const startTimestamp = currentDate.valueOf();
      currentDate.setDate(currentDate.getDate() + numberOfDaysAheadForAppointmentSlots);
      const endTimestamp = currentDate.valueOf();
      const CONFIGURATION = {
        "capabilities":{
          "input":true,
          "autocomplete":true,
          "directions":true,
          "distanceMatrix":true
      },
      "locations":[
            {
              "title":"Alloy | Roswell, GA",
              "address1":"2500 Old Alabama Rd",
              "address2":"Roswell, GA 30076",
              "coords":{"lat":34.0216902837045,"lng":-84.28589966441801},"placeId":"ChIJgeNlZ0t19YgRHseqt4C59iY",
              "phoneNumber": "(770) 373-4933"
            },
        ],

                "mapOptions":{},
                "mapsApiKey":"AIzaSyCGLJOeVe4yMDdDj7c4UhWsbOEWj4rRGtA"
        };
      let locatorRef;
      function initMap() {
        if(!searchMade){
          locatorRef = new LocatorPlus(CONFIGURATION);
        } else {
          console.log("Search already made.")
        }
        
      }
      async function getAppointments(){
        for(const [index, location] of CONFIGURATION.locations.entries()){
          const locationInfo = locationMappings[location.placeId];
          if(locationInfo && locationInfo.key && locationInfo.calendarId){
            const url = new URL("https://rest.gohighlevel.com/v1/appointments/slots?");
            const params = new URLSearchParams({
              startDate: startTimestamp,
              endDate: endTimestamp,
              calendarId: locationInfo.calendarId
            })
            const reqHeaders = new Headers({
              'Authorization': `Bearer ${locationInfo.key}`,
            });
            console.log(url + params)
            const appointments = await fetch(url + params,{
              headers: reqHeaders,
              method: 'GET'
            });
            const data = await appointments.json();
            console.log(data)
            let availableSlots = 0;
            for(const dateKey of Object.keys(data)){
              const slotsObject = data[dateKey]
              if(slotsObject && slotsObject.slots && slotsObject.slots.length){
                availableSlots += slotsObject.slots.length
              }
            }
            CONFIGURATION.locations[index].bookingSlots = availableSlots
            CONFIGURATION.locations[index].bookingURL = locationInfo.bookingURL;
          }
        }
        locatorRef.renderResultsList();
      }
      getAppointments();
    </script>
    <script id="locator-result-items-tmpl" type="text/x-handlebars-template">
      <div style="display: none;">
        <svg viewBox="0 0 17 17" id="icon-phone"><path d="M16.86 12.538v2.511a1.674 1.674 0 01-1.825 1.675 16.568 16.568 0 01-7.225-2.57A16.326 16.326 0 012.786 9.13a16.568 16.568 0 01-2.57-7.258A1.674 1.674 0 011.882.047h2.512a1.675 1.675 0 011.674 1.44c.106.803.303 1.593.586 2.352.23.612.083 1.302-.377 1.767L5.214 6.669a13.395 13.395 0 005.023 5.023l1.064-1.063a1.674 1.674 0 011.766-.377c.76.284 1.549.48 2.353.586.842.119 1.46.85 1.44 1.7z" fill="#DBDC09" fill-rule="evenodd"></path></svg>
        
        <svg viewBox="0 0 14 8" id="icon-caret-up-orange"><path stroke="#DBDC09" stroke-width="2" d="M13 7L7 1 1 7" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg>
        <svg viewBox="0 0 11 12" id="icon-star"><path d="M8.538 11.224a.6.6 0 00.453-.23.658.658 0 00.133-.508L8.62 7.302l2.197-2.272a.657.657 0 00.152-.65.618.618 0 00-.487-.433l-3.054-.484L6.046.58A.607.607 0 005.5.224a.607.607 0 00-.546.355L3.57 3.463l-3.054.484a.618.618 0 00-.487.434.657.657 0 00.152.65L2.38 7.301l-.503 3.184a.65.65 0 00.245.617c.186.141.432.16.636.05L5.5 9.67l2.743 1.484c.09.05.192.074.295.071z" fill="#3E7FB5" fill-rule="evenodd"></path></svg>
        </div>
      {{#each locations}}
        <li class="location-result" data-location-index="{{index}}">
          <button class="select-location">
            <a class="linkTitle" href="{{bookingURL}}">
              <h2 class="name">{{title}} <svg role="img" class="location-tile-heading__icon" height="18px" width="18px" focusable="false" tabindex="-1" aria-hidden="true" aria-disabled="true"><title></title><use xlink:href="#icon-caret-up-orange"></use></svg></h2>
            </a>
          </button>
          <div class="address">
            {{address1}}<br>{{address2}}
          </div>
          <a href="tel:{{phoneNumber}}" class=" " data-analytics-type="location tile" data-analytics-value="call number: Barboursville, WV" aria-describedby="loc_uuid_1412"><svg role="img" class="location-tile__call-icon location-tile__call-icon--phone" height="18px" width="18px" focusable="false" tabindex="-1" aria-label="Telephone"><title></title><use xlink:href="#icon-phone"></use></svg><span class="cta-link">{{phoneNumber}}</span></a>
  
          {{#if travelDistanceText}}
            <div class="distance">{{travelDistanceText}}</div>
          {{/if}}
          {{#if ../showDirectionsButton}}
          
          {{/if}}
          {{#if bookingSlots}}
          <div class="bookingSlots">
            <div>
              <div class="location-tile-promo"><svg role="img" class="location-tile-promo__icon" height="18px" width="18px" focusable="false" tabindex="-1" aria-hidden="true" aria-disabled="true"><title></title><use xlink:href="#icon-star"></use></svg><span class="location-tile-promo__text">First Session Free*</span></div>
              <strong>{{bookingSlots}} Available Booking Times</strong>
            </div>
            <a href="{{bookingURL}}" class="cta-button " data-analytics-type="location tile" data-analytics-value="book cta:Barboursville, WV" aria-describedby="loc_uuid_1412">Book Now</a>
          </div>
          
          {{/if}}
        </li>
      
      {{/each}}
    </script>
  </head>
  <body>
    <div id="map-container">
      <div id="locations-panel">
        <div id="locations-panel-list">
          <header style="display: none;">
            <span class="search-title">
              Your Location
            </span>
            <div class="search-input">
              <div id="search-overlay-search" class="search-input-overlay marker">
                <button id="location-search-button">
                  <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0V0z" fill="none"/><path stroke="#DBDC09" fill="#DBDC09" d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zM7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 2.88-2.88 7.19-5 9.88C9.92 16.21 7 11.85 7 9z"/><circle stroke="#DBDC09" fill="#DBDC09" cx="12" cy="9" r="2.5"/></svg>
                </button>
              </div>
              <input id="location-search-input" placeholder="Enter your address or zip code">
              <div id="search-overlay-search" class="search-input-overlay search">
                <button id="location-search-button">
                  <img class="icon" src="https://fonts.gstatic.com/s/i/googlematerialicons/search/v11/24px.svg" alt="Search"/>
                </button>
              </div>
            </div>
          </header>
          <div class="section-name" id="location-results-section-name">
            <!-- All locations -->
          </div>
          <div class="results">
            <ul id="location-results-list"></ul>
          </div>
        </div>
      </div>
      <div id="map"></div>
    </div>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCGLJOeVe4yMDdDj7c4UhWsbOEWj4rRGtA&amp;callback=initMap&amp;libraries=places,geometry&amp;channel=GMPSB_locatorplus_v2_cABCD" async defer></script>
  </body>
</html>
